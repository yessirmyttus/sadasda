local uis = game:GetService("UserInputService")
local runService = game:GetService("RunService")

-- 💻 Mouse Tracking Vars
local mouseX, mouseY = 0, 0
local mouseDown = false

-- 🎯 Hook Input Movement
uis.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        mouseX, mouseY = input.Position.X, input.Position.Y
    end
end)

uis.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        mouseDown = true
    end
end)

uis.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        mouseDown = false
    end
end)

-- 🌑 Main Frame
local mainFrame = Drawing.new("Square")
mainFrame.Position = Vector2.new(100, 100)
mainFrame.Size = Vector2.new(500, 350)
mainFrame.Color = Color3.fromRGB(15, 15, 20)
mainFrame.Filled = true
mainFrame.Transparency = 1

-- 💜 Title
local title = Drawing.new("Text")
title.Text = "disconnect.wtf"
title.Position = Vector2.new(110, 110)
title.Size = 16
title.Color = Color3.fromRGB(255, 0, 255)
title.Center = false
title.Outline = true

-- 🔵 Tabs
local tabNames = {"Aimbot", "Visuals", "Misc", "World", "Settings"}
for i, name in ipairs(tabNames) do
    local tab = Drawing.new("Text")
    tab.Text = name
    tab.Size = 13
    tab.Color = (name == "Aimbot") and Color3.fromRGB(150, 100, 255) or Color3.fromRGB(255, 255, 255)
    tab.Position = Vector2.new(180 + ((i - 1) * 60), 110)
    tab.Center = false
    tab.Outline = true
end

-- ✅ Checkboxes
local function createCheckbox(text, x, y)
    local box = Drawing.new("Text")
    box.Text = "[X] " .. text
    box.Position = Vector2.new(x, y)
    box.Size = 13
    box.Color = Color3.fromRGB(255, 255, 255)
    box.Outline = true
    return box
end

local aimbotCheck = createCheckbox("Aimbot", 120, 140)
local silentCheck = createCheckbox("Silent Aim", 130, 160)
local hitchanceCheck = createCheckbox("Hitchance", 130, 200)
local fovCheck = createCheckbox("Draw FOV", 130, 240)

-- 🔁 Toggle Logic
local function toggleCheckbox(box)
    if box.Text:sub(2, 2) == "X" then
        box.Text = "[ ] " .. box.Text:sub(6)
    else
        box.Text = "[X] " .. box.Text:sub(6)
    end
end

runService.RenderStepped:Connect(function()
    if mouseDown then
        local mx, my = mouseX, mouseY
        for _, box in pairs({aimbotCheck, silentCheck, hitchanceCheck, fovCheck}) do
            local bx, by = box.Position.X, box.Position.Y
            if mx >= bx and mx <= bx + 100 and my >= by and my <= by + 20 then
                toggleCheckbox(box)
                wait(0.2)
            end
        end
    end
end)

-- 🔻 Dropdown
local dropdownOpen = false
local dropdownItems = {"Head", "Chest", "Arms"}
local dropdown = Drawing.new("Text")
dropdown.Text = "Head ▼"
dropdown.Position = Vector2.new(150, 180)
dropdown.Size = 13
dropdown.Color = Color3.fromRGB(200, 200, 200)
dropdown.Outline = true

local renderedItems = {}
local function renderDropdown()
    for _, v in pairs(renderedItems) do v:Remove() end
    renderedItems = {}

    if not dropdownOpen then return end

    for i, item in ipairs(dropdownItems) do
        local ddItem = Drawing.new("Text")
        ddItem.Text = item
        ddItem.Position = Vector2.new(dropdown.Position.X, dropdown.Position.Y + (i * 15))
        ddItem.Size = 13
        ddItem.Color = Color3.fromRGB(255, 255, 255)
        ddItem.Outline = true
        renderedItems[#renderedItems + 1] = ddItem
    end
end

-- 🖱️ Dropdown Click Detection
runService.RenderStepped:Connect(function()
    if mouseDown then
        local mx, my = mouseX, mouseY
        local dx, dy = dropdown.Position.X, dropdown.Position.Y

        if mx >= dx and mx <= dx + 100 and my >= dy and my <= dy + 20 then
            dropdownOpen = not dropdownOpen
            renderDropdown()
            wait(0.2)
        end

        if dropdownOpen then
            for i, v in ipairs(renderedItems) do
                local vx, vy = v.Position.X, v.Position.Y
                if mx >= vx and mx <= vx + 100 and my >= vy and my <= vy + 20 then
                    dropdown.Text = v.Text .. " ▼"
                    dropdownOpen = false
                    renderDropdown()
                    wait(0.2)
                end
            end
        end
    end
end)

-- 🎚️ Sliders: Hitchance + FOV
local function createSlider(x, y, color)
    local slider = Drawing.new("Square")
    slider.Position = Vector2.new(x, y)
    slider.Size = Vector2.new(150, 4)
    slider.Color = color
    slider.Filled = true
    slider.Transparency = 1
    return slider
end

local hitchanceSlider = createSlider(130, 220, Color3.fromRGB(180, 50, 255))
local hitchanceValue = Drawing.new("Text")
hitchanceValue.Text = "90"
hitchanceValue.Position = Vector2.new(290, 215)
hitchanceValue.Size = 13
hitchanceValue.Color = Color3.fromRGB(255, 255, 255)
hitchanceValue.Outline = true

local fovSlider = createSlider(130, 260, Color3.fromRGB(255, 255, 255))
local fovValue = Drawing.new("Text")
fovValue.Text = "31.250"
fovValue.Position = Vector2.new(290, 255)
fovValue.Size = 13
fovValue.Color = Color3.fromRGB(255, 255, 255)
fovValue.Outline = true

-- 🎯 Slider Logic
local draggingSlider, draggingFOV = false, false
runService.RenderStepped:Connect(function()
    local mx, my = mouseX, mouseY

    if mouseDown and not draggingSlider and mx >= 130 and mx <= 280 and my >= 220 and my <= 230 then
        draggingSlider = true
    elseif mouseDown and not draggingFOV and mx >= 130 and mx <= 280 and my >= 260 and my <= 270 then
        draggingFOV = true
    end

    if not mouseDown then
        draggingSlider = false
        draggingFOV = false
    end

    if draggingSlider then
        local value = math.clamp((mx - 130) / 150, 0, 1)
        hitchanceSlider.Size = Vector2.new(150 * value, 4)
        hitchanceValue.Text = tostring(math.floor(value * 100))
    end

    if draggingFOV then
        local value = math.clamp((mx - 130) / 150, 0, 1)
        fovSlider.Size = Vector2.new(150 * value, 4)
        fovValue.Text = string.format("%.3f", value * 180)
    end
end)

-- 🔫 Weapon Sliders
local weaponSliderData = {
    {name = "Recoil X", y = 180, percent = 0},
    {name = "Recoil Y", y = 200, percent = 0},
    {name = "Spread",   y = 220, percent = 0}
}

local draggingWeapon = nil
local weaponSliders = {}

for i, data in ipairs(weaponSliderData) do
    local label = Drawing.new("Text")
    label.Text = data.name .. ": 0.0%"
    label.Position = Vector2.new(360, data.y - 15)
    label.Size = 13
    label.Color = Color3.fromRGB(255, 255, 255)
    label.Outline = true

    local box = Drawing.new("Square")
    box.Position = Vector2.new(360, data.y)
    box.Size = Vector2.new(0, 4)
    box.Color = Color3.fromRGB(255, 0, 255)
    box.Filled = true
    weaponSliders[i] = {label = label, bar = box}
end

runService.RenderStepped:Connect(function()
    local mx, my = mouseX, mouseY

    for i, data in ipairs(weaponSliderData) do
        local sx, sy = 360, data.y
        if mouseDown and not draggingWeapon and mx >= sx and mx <= sx + 100 and my >= sy and my <= sy + 10 then
            draggingWeapon = i
        end
    end

    if not mouseDown then draggingWeapon = nil end

    if draggingWeapon then
        local idx = draggingWeapon
        local value = math.clamp((mouseX - 360) / 100, 0, 1)
        weaponSliderData[idx].percent = value
        weaponSliders[idx].bar.Size = Vector2.new(100 * value, 4)
        weaponSliders[idx].label.Text = weaponSliderData[idx].name .. ": " .. math.floor(value * 1000) / 10 .. "%"
    end
end)
